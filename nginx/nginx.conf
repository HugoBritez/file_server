# Configuración optimizada de nginx para el servidor de archivos
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Configuración de eventos
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuración de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Configuración básica
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Configuración de compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Límites y timeouts
    client_max_body_size 200M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_connect_timeout 60s;

    # Configuración de buffers
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=2r/s;

    # Upstream para el API Go
    upstream go_api {
        server api:3000;
        keepalive 32;
    }

    # Servidor principal (HTTP)
    server {
        listen 3080;
        listen [::]:3080;
        server_name _;

        # Headers de seguridad
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # CORS headers globales
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Client-Id, X-Requested-With" always;
        add_header Access-Control-Expose-Headers "Content-Length, Content-Range, Content-Disposition" always;

        # Manejar preflight requests
        location ~ ^/api/ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Client-Id, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Health check local
        location /health {
            access_log off;
            return 200 "nginx OK\n";
            add_header Content-Type text/plain;
        }

        # API Routes - Proxy al backend Go
        location /api/ {
            # Rate limiting para API
            limit_req zone=api burst=20 nodelay;

            # Proxy al backend Go
            proxy_pass http://go_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts específicos para uploads
            location /api/files/upload {
                limit_req zone=uploads burst=5 nodelay;
                client_max_body_size 200M;
                proxy_request_buffering off;
                proxy_pass http://go_api;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

        # Archivos estáticos - Servidos directamente por nginx
        location /static/ {
            alias /var/www/static/;
            
            # Configuración de cache agresiva para archivos estáticos
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "nginx-static";

            # Soporte para range requests (streaming)
            location ~ ^/static/(.+)/(.+)$ {
                alias /var/www/static/$1/$2;
                
                # Validar que el cliente existe
                set $client_id $1;
                set $filename $2;
                
                # Headers para descarga
                add_header Content-Disposition 'inline';
                add_header X-Client-ID $client_id;
                
                # Optimizaciones
                sendfile on;
                sendfile_max_chunk 1m;
                tcp_nopush on;
                
                # Cache headers
                expires 1y;
                add_header Cache-Control "public, immutable";
                
                # CORS para archivos estáticos
                add_header Access-Control-Allow-Origin "*";
                
                # Try files
                try_files $uri =404;
            }
        }

        # Frontend - Panel de administración
        location / {
            root /var/www/frontend;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Cache para archivos del frontend
            location ~* \.(css|js|ico|png|jpg|jpeg|gif|svg)$ {
                expires 1h;
                add_header Cache-Control "public";
            }
        }

        # Favicon y robots.txt
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            return 204;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
            return 200 "User-agent: *\nDisallow: /\n";
            add_header Content-Type text/plain;
        }

        # Error pages personalizadas
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"success":false,"error":"Recurso no encontrado","code":404}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"success":false,"error":"Error interno del servidor","code":500}';
            add_header Content-Type application/json;
        }
    }

    # Servidor para puerto 4040 (HTTP)
    server {
        listen 4040;
        listen [::]:4040;
        server_name _;

        # Headers de seguridad
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # CORS headers globales
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Client-Id, X-Requested-With" always;
        add_header Access-Control-Expose-Headers "Content-Length, Content-Range, Content-Disposition" always;

        # Manejar preflight requests
        location ~ ^/api/ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Client-Id, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Health check local
        location /health {
            access_log off;
            return 200 "nginx OK\n";
            add_header Content-Type text/plain;
        }

        # API Routes - Proxy al backend Go
        location /api/ {
            # Rate limiting para API
            limit_req zone=api burst=20 nodelay;

            # Proxy al backend Go
            proxy_pass http://go_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts específicos para uploads
            location /api/files/upload {
                limit_req zone=uploads burst=5 nodelay;
                client_max_body_size 200M;
                proxy_request_buffering off;
                proxy_pass http://go_api;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

        # Frontend - Panel de administración
        location / {
            root /var/www/frontend;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Cache para archivos del frontend
            location ~* \.(css|js|ico|png|jpg|jpeg|gif|svg)$ {
                expires 1h;
                add_header Cache-Control "public";
            }
        }

        # Archivos estáticos - Servidos directamente por nginx
        location /static/ {
            alias /var/www/static/;
            
            # Configuración de cache agresiva para archivos estáticos
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "nginx-static";

            # Soporte para range requests (streaming)
            location ~ ^/static/(.+)/(.+)$ {
                alias /var/www/static/$1/$2;
                
                # Validar que el cliente existe
                set $client_id $1;
                set $filename $2;
                
                # Headers para descarga
                add_header Content-Disposition 'inline';
                add_header X-Client-ID $client_id;
                
                # Optimizaciones
                sendfile on;
                sendfile_max_chunk 1m;
                tcp_nopush on;
                
                # Cache headers
                expires 1y;
                add_header Cache-Control "public, immutable";
                
                # CORS para archivos estáticos
                add_header Access-Control-Allow-Origin "*";
                
                # Try files
                try_files $uri =404;
            }
        }

        # Favicon y robots.txt
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            return 204;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
            return 200 "User-agent: *\nDisallow: /\n";
            add_header Content-Type text/plain;
        }

        # Error pages personalizadas
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"success":false,"error":"Recurso no encontrado","code":404}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"success":false,"error":"Error interno del servidor","code":500}';
            add_header Content-Type application/json;
        }
    }

    # Configuración HTTPS para producción
    server {
        listen 3443 ssl http2;
        listen [::]:3443 ssl http2;
        server_name node.sofmar.com.py;

        # Certificados de producción
        ssl_certificate /etc/nginx/ssl/server.cer;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Headers de seguridad
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # CORS headers globales
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Client-Id, X-Requested-With" always;
        add_header Access-Control-Expose-Headers "Content-Length, Content-Range, Content-Disposition" always;

        # Manejar preflight requests
        location ~ ^/api/ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Client-Id, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Health check local
        location /health {
            access_log off;
            return 200 "nginx OK\n";
            add_header Content-Type text/plain;
        }

        # API Routes - Proxy al backend Go
        location /api/ {
            # Proxy al backend Go
            proxy_pass http://go_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts específicos para uploads
            location /api/files/upload {
                limit_req zone=uploads burst=5 nodelay;
                client_max_body_size 200M;
                proxy_request_buffering off;
                proxy_pass http://go_api;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

        # Archivos estáticos - Servidos directamente por nginx
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "nginx";
            try_files $uri =404;
        }

        # Páginas de error personalizadas
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"success":false,"error":"Recurso no encontrado","code":404}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"success":false,"error":"Error interno del servidor","code":500}';
            add_header Content-Type application/json;
        }
    }
}